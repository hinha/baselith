name: Release Build and Test

on:
  release:
    types: [created]

permissions:
  contents: write

defaults:
  run:
    shell: bash

jobs:
  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            artifact_name: baselith-linux-amd64
          - os: windows-latest
            goos: windows
            goarch: amd64
            artifact_name: baselith-windows-amd64.exe
          - os: macos-arm-latest
            goos: darwin
            goarch: arm64         
            artifact_name: baselith-darwin-arm64
          - os: macos-amd-latest
            goos: darwin
            goarch: amd64         
            artifact_name: baselith-darwin-arm64

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: '1.21' }

      - run: go mod download

      - name: Detect main package
        id: main
        run: |
          set -e
          # Ambil direktori pertama yg bernama package main
          MP=$(go list -f '{{if eq .Name "main"}}{{.Dir}}{{end}}' ./... | head -n1)
          if [ -z "$MP" ]; then
            echo "No package main found in repo."; exit 1
          fi
          echo "Found main package at: $MP"
          echo "main_pkg=$MP" >> "$GITHUB_OUTPUT"

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -trimpath -ldflags "-s -w" -o "${{ matrix.artifact_name }}" "${{ steps.main.outputs.main_pkg }}"
          chmod +x "${{ matrix.artifact_name }}" || true
          file "${{ matrix.artifact_name }}" || true

      - name: Run tests
        run: go test ./... -v

      - name: Upload Release Asset
        if: ${{ hashFiles(matrix.artifact_name) != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}
          asset_name: ${{ matrix.artifact_name }}
          asset_content_type: application/octet-stream
